name: 🧪 Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: 🧪 Run Tests
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'yarn'

      - name: 🔧 Install dependencies
        run: yarn install --frozen-lockfile

      - name: 🧪 Run type check
        run: yarn tsc --noEmit

      - name: 🧹 Run linter
        run: yarn lint

      - name: 🧪 Run tests
        run: yarn test --coverage --passWithNoTests

      - name: 📊 Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

      - name: 💬 Comment test results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            // Read coverage summary if it exists
            let coverageComment = '## 🧪 Test Results\n\n✅ All tests passed!\n\n';
            
            try {
              const coverageFile = './coverage/coverage-summary.json';
              if (fs.existsSync(coverageFile)) {
                const coverage = JSON.parse(fs.readFileSync(coverageFile, 'utf8'));
                const total = coverage.total;
                
                coverageComment += `### 📊 Coverage Report\n\n`;
                coverageComment += `| Metric | Coverage |\n`;
                coverageComment += `|--------|----------|\n`;
                coverageComment += `| Lines | ${total.lines.pct}% (${total.lines.covered}/${total.lines.total}) |\n`;
                coverageComment += `| Functions | ${total.functions.pct}% (${total.functions.covered}/${total.functions.total}) |\n`;
                coverageComment += `| Branches | ${total.branches.pct}% (${total.branches.covered}/${total.branches.total}) |\n`;
                coverageComment += `| Statements | ${total.statements.pct}% (${total.statements.covered}/${total.statements.total}) |\n\n`;
              }
            } catch (error) {
              console.log('Could not read coverage summary:', error.message);
            }
            
            coverageComment += `### 🎯 Test Categories\n`;
            coverageComment += `- **Component Tests**: UI components and interactions\n`;
            coverageComment += `- **API Tests**: REST endpoints and error handling\n`;
            coverageComment += `- **Hook Tests**: React hooks and state management\n`;
            coverageComment += `- **Config Tests**: Supabase and utility configurations\n\n`;
            coverageComment += `_Built with ❤️ by the VeryHumanAI team_`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: coverageComment
            });

  build:
    name: 🏗️ Build Check
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js 20.x
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: 'yarn'

      - name: 🔧 Install dependencies
        run: yarn install --frozen-lockfile

      - name: 🏗️ Build application
        run: yarn build

      - name: ✅ Build successful
        run: echo "🎉 Build completed successfully!"
